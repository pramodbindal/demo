---
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: tenant-pipeline-next
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: release
spec:
  description: Pipeline to push built images to quay registry for nightly build
  params:
    - name: released_version
      type: string
    - name: snapshot
      type: string
  tasks:
    - name: create-tag
      params:
        - name: RELEASED_VERSION
          value: "$(params.released_version)"
        - name: SNAPSHOT
          value: "$(params.snapshot)"
      taskSpec:
        params:
          - name: RELEASED_VERSION
            type: string
          - name: SNAPSHOT
            type: string
        steps:
          - name: create-tag
            image: quay.io/konflux-ci/release-service-utils:e633d51cd41d73e4b3310face21bb980af7a662f
            script: |
              #!/usr/bin/env bash
              set -eo pipefail
              echo "Released Version : $(params.RELEASED_VERSION)"
              get-resource "snapshot" $(params.SNAPSHOT) > /tmp/snapshot.json
              cat /tmp/snapshot.json
              file="/tmp/snapshot.json"
              container_images=($(jq -r '.spec.components[].containerImage' "$file"))
              for container_image in "${container_images[@]}"; do 
                TARGET_REGISTRY="quay.io/openshift-pipeline"
                SOURCE_PATTEN="quay.io/.*/(pipeline-)?(.*@sha256:.+)"
                TARGET_PATTEN="${TARGET_REGISTRY}/pipelines-\2"
                new_image=$(echo "$container_image" | sed -E "s|$SOURCE_PATTEN|$TARGET_PATTEN|g")
                new_image=$(echo "$new_image" | sed -E "s/operator-operator-rhel9/rhel9-operator/g")  # For Operator Image
              echo "Component Image updated for release : $IMAGE"
                sha=${new_image/*@sha256:/}
                new_image=${new_image/@sha256:*/}
                tags=(next ${sha} )
                for tag in "${tags[@]}"; do
                  echo "copying the image from $container_image to $new_image with tag $tag and preserving digests"
                  skopeo copy docker://"$container_image" docker://"$new_image:$tag" --all --preserve-digests
                done
              done
