---
apiVersion: tekton.dev/v1
kind: PipelineRun
metadata:
  generateName: deploy-operator-pipelines-e2e-tests-
  labels:
    appstudio.openshift.io/component: operator-main-bundle
spec:
  workspaces:
    - name: source
      emptyDir: { }
  PipelineSpec:
    params:
      - name: registry
        type: string
        default: image-registry.openshift-image-registry.svc:5000/$(context.pipelineRun.namespace)/release-tests

      - name: buildCommand
        type: string
#        default: ls
        default: gauge run --tags="" --log-level=debug --verbose specs/pipelines
      - name: force-cache-upload
        type: string
        default: "false"
      - name : image
        type: string
        default: quay.io/openshift-pipeline/ci:latest
      - name : repo_url
        type: string
        default: https://github.com/openshift-pipelines/release-tests.git
      - name : revision
        type: string
        default: master
      - description: Snapshot of the application
        name: SNAPSHOT
        default: '{}'
        type: string
      - name: cachePatterns
        type: array
        default: [ "**go.mod", "**go.sum" ]
      - description: Namespace where the the Operator bundle will be deployed.
        name: NAMESPACE
        default: openshift-operators
        type: string
    tasks:
      - name: deploy-operator
        params:
          - name: bundleImage
            value: quay.io/redhat-user-workloads/tekton-ecosystem-tenant/operator-main/bundle:ff99900ca11d2161c72a7a346290be49e0df4c54
          - name: namespace
            value: "$(params.NAMESPACE)"
        taskSpec:
          params:
            - name: bundleImage
              type: string
            - name: namespace
              type: string
          volumes:
            - name: credentials
              secret:
                secretName: rosa
          steps:
            - name: operator-sdk-run-bundle
              image: quay.io/operator-framework/operator-sdk:latest
              env:
                - name: KUBECONFIG
                  value: "/credentials/kubeconfig"
              args:
                - run
                - bundle
                - --namespace
                - "$(params.namespace)"
                - "$(params.bundleImage)"
              script: |
                #!/usr/bin/env bash
                whoami
                pwd
                echo $HOME
              volumeMounts:
                - name: credentials
                  mountPath: /credentials
      - name: e2e-test
        description: Placeholder task that prints the Snapshot and outputs standard TEST_OUTPUT
        runAfter:
          - deploy-operator
        params:
          - name: SNAPSHOT
            value: $(params.SNAPSHOT)
        taskSpec:
          params:
            - name: SNAPSHOT
          volumes:
            - name: credentials
              secret:
                secretName: rosa
          results:
            - name: TEST_OUTPUT
              description: Test output
          steps:
            - name: create-repo
              image: $(params.image)
              script: |
                mkdir -p $(workspaces.source.path)/repo
                chmod 777 $(workspaces.source.path)/repo
            - name: fetch-repo
              ref:
                resolver: http
                params:
                  - name: url
                    value: https://raw.githubusercontent.com/tektoncd/catalog/main/stepaction/git-clone/0.1/git-clone.yaml
              params:
                - name: output-path
                  value: $(workspaces.source.path)/repo
                - name: url
                  value: $(params.repo_url)
                - name: revision
                  value: $(params.revision)
            - name: cache-fetch
              ref:
                resolver: http
                params:
                  - name: url
                    value: https://raw.githubusercontent.com/openshift-pipelines/tekton-caches/main/tekton/cache-fetch.yaml
              params:
                - name: patterns
                  value: $(params.cachePatterns)
                - name: source
                  value: oci://$(params.registry):{{hash}}
                - name: cachePath
                  value: $(workspaces.source.path)/cache
                - name: workingdir
                  value: $(workspaces.source.path)/repo
            - image: $(params.image)
              workingDir: $(workspaces.source.path)/repo
              name: run-go-build
              env:
                - name: GOCACHE
                  value: $(workspaces.source.path)/cache/gocache
                - name: GOMODCACHE
                  value: $(workspaces.source.path)/cache/gomodcache
                - name: KUBECONFIG
                  value: "/credentials/kubeconfig"
              volumeMounts:
                - name: credentials
                  mountPath: /credentials
              script: |
                set -x
                
                echo $KUBECONFIG
                cat $KUBECONFIG
                oc get tektonconfig config
                #export GITHUB_TOKEN=github_pat_11AADMVLA04BLwQwYyaoDt_dv8w6FF7iQo51xiTm1wwXwm5ZTIc7VZgKJNgqZSRp1SSL6OIPOKvY2UI
                oc create secret generic github-auth-secret --from-literal github-auth-key=$GITHUB_TOKEN -n openshift-pipelines
                PATCH_DATA="{\"spec\":{\"pipeline\":{\"git-resolver-config\":{ \"api-token-secret-key\": \"github-auth-key\",\"api-token-secret-name\":\"github-auth-secret\",\"api-token-secret-namespace\":\"openshift-pipelines\",\"default-revision\":\"main\",\"fetch-timeout\":\"1m\",\"scm-type\":\"github\"}}}}"
                echo $PATCH_DATA | jq
                oc patch tektonconfig config -p "${PATCH_DATA}" --type=merge
                $(params.buildCommand) || true
                echo "Cache size is $(du -sh $(workspaces.source.path)/cache)"
            - name: cache-upload
              ref:
                resolver: http
                params:
                  - name: url
                    value: https://raw.githubusercontent.com/openshift-pipelines/tekton-caches/main/tekton/cache-upload.yaml
              params:
                - name: patterns
                  value: $(params.cachePatterns)
                - name: target
                  value: oci://$(params.registry):{{hash}}
                - name: cachePath
                  value: $(workspaces.source.path)/cache
                - name: workingdir
                  value: $(workspaces.source.path)/repo
                - name: force-cache-upload
                  value: $(params.force-cache-upload)
